name: Release

permissions:
  contents: write
  id-token: write # npm publish --provenance 用
  packages: write # npm package用

on:
  # 手動実行用トリガー（バージョン指定とタイプ選択可能）
  workflow_dispatch:
    inputs:
      version:
        description: '明示的なバージョン番号（空白の場合はバージョンタイプを使用）'
        required: false
        type: string
      version_type:
        description: 'バージョン更新タイプ'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
  
  # package.jsonの変更を検出した場合の自動実行
  push:
    branches:
      - main
    paths:
      - 'package.json'
  
  # リリース作成時の自動実行
  release:
    types: [created]

jobs:
  # バージョン変更を検出するジョブ
  check-version:
    name: バージョン変更確認
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    outputs:
      should_release: ${{ github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && steps.version.outputs.changed == 'true') }}
      version: ${{ github.event.inputs.version || steps.version_from_type.outputs.version || steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      # package.jsonの変更検出
      - name: バージョン変更チェック
        id: version
        if: github.event_name == 'push'
        uses: EndBug/version-check@v2
        with:
          static-checking: localIsNew
          file-name: package.json
          file-url: https://raw.githubusercontent.com/${{ github.repository }}/${{ github.event.before }}/package.json
      
      # バージョンタイプからバージョンを計算（手動実行時）
      - name: バージョンタイプからバージョン計算
        id: version_from_type
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.version == ''
        run: |
          npm install -g semver
          current_version=$(node -p "require('./package.json').version")
          new_version=$(semver -i ${{ github.event.inputs.version_type }} $current_version)
          echo "version=$new_version" >> $GITHUB_OUTPUT
  
  # バージョン更新とCHANGELOG生成
  prepare-release:
    name: リリース準備
    needs: check-version
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # 未コミットの変更をチェック
      - name: Check for uncommitted changes
        id: check_changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "未コミットの変更があります。まず変更をコミットしてください。"
            git status --porcelain
            exit 1
          fi
      
      - name: Setup Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: Node.js設定
        uses: ./.github/actions/node-setup
        with:
          node-version: ''
          package-path: '.'

      # package.jsonのバージョン更新（手動実行時のみ）
      - name: バージョン更新
        if: github.event_name == 'workflow_dispatch'
        run: |
          if [[ -n "${{ github.event.inputs.version }}" ]]; then
            npm version ${{ github.event.inputs.version }} --no-git-tag-version
          else
            npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          fi
      
      # 現在のバージョンを取得
      - name: 現在のバージョン取得
        id: get_version
        run: echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
      
      # CHANGELOGを生成
      - name: CHANGELOG生成
        uses: ./.github/actions/generate-changelog
        with:
          version: ${{ steps.get_version.outputs.version }}
          commit-changes: 'false'
      
      # 変更をコミットし、タグを作成
      - name: Commit changes and create tag
        run: |
          git add package.json pnpm-lock.yaml CHANGELOG.md
          git commit -m "chore: Bump version to v${{ steps.get_version.outputs.version }}"
          git tag -a v${{ steps.get_version.outputs.version }} -m "Release v${{ steps.get_version.outputs.version }}"
          git push
          git push --tags
  
  # 各プラットフォーム向けのバイナリをビルド
  build-binaries:
    name: バイナリビルド (${{ matrix.name }})
    needs: [check-version, prepare-release]
    if: needs.check-version.outputs.should_release == 'true' || github.event_name == 'release'
    strategy:
      fail-fast: false  # 一つのビルドが失敗しても他を続行
      matrix:
        include:
          - name: linux-x64-gnu # napi naming convention to match pr-build
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - name: darwin-x64 # napi naming convention
            os: macos-latest
            target: x86_64-apple-darwin
          - name: darwin-arm64 # napi naming convention
            os: macos-latest
            target: aarch64-apple-darwin
          - name: win32-x64-msvc # napi naming convention
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - name: win32-arm64-msvc # napi naming convention
            os: windows-latest
            target: aarch64-pc-windows-msvc

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || 'main' }}

      # Use the new composite action for building
      - name: Build Native Module
        uses: ./.github/actions/build-native-module
        with:
          name: ${{ matrix.name }} # Pass the napi-style name
          os: ${{ matrix.os }}
          target: ${{ matrix.target }}
          artifact-name-prefix: 'binaries' # Specify the prefix for release artifacts

      # アーカイブしてパーミッション損失を防ぐ
      - name: Archive Binary (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          ARTIFACT_NAME="electron-pan-clip.${{ matrix.name }}.node"
          ARCHIVE_NAME="binaries-${{ matrix.name }}.zip"
          # 7z を使用 (GitHub Actions Windows runner にはプリインストールされている)
          7z a $ARCHIVE_NAME $ARTIFACT_NAME
          echo "Created archive: $ARCHIVE_NAME containing $ARTIFACT_NAME"

      - name: Archive Binary (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          ARTIFACT_NAME="electron-pan-clip.${{ matrix.name }}.node"
          ARCHIVE_NAME="binaries-${{ matrix.name }}.tar.gz"
          tar czf $ARCHIVE_NAME $ARTIFACT_NAME
          echo "Created archive: $ARCHIVE_NAME containing $ARTIFACT_NAME"

      # Upload the ARCHIVED binary
      - name: Upload Binary Artifact
        uses: actions/upload-artifact@v4
        with:
          name: binaries-${{ matrix.name }} # Use the consistent artifact name
          path: |
            *.tar.gz
            *.zip
          if-no-files-found: error

  # GitHub Releaseを作成
  create-release:
    name: GitHubリリース作成
    needs: [check-version, prepare-release]
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: main # 最新の変更を取得
      
      # リリースノートを抽出
      - name: リリースノート抽出
        id: extract-notes
        uses: ./.github/actions/extract-release-notes
        with:
          version: ${{ needs.prepare-release.outputs.version }}
      
      # GitHubリリースを作成
      - name: GitHub Release作成
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: Release v${{ needs.prepare-release.outputs.version }}
          body: ${{ steps.extract-notes.outputs.notes }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
  # npmにパッケージをパブリッシュ
  publish-npm:
    name: npmパブリッシュ
    runs-on: ubuntu-latest
    needs: [check-version, create-release, build-binaries]
    # リリースの作成もしくはリリースイベントから実行された場合に実行
    if: needs.check-version.outputs.should_release == 'true' || github.event_name == 'release'
    permissions:
      id-token: write # npm publish --provenance 用
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event_name == 'release' && github.event.release.tag_name || 'main' }}
          # リリース対象のタグ/ブランチをチェックアウト

      - name: Node.js設定
        uses: ./.github/actions/node-setup
        # devDependencies をインストールするために package-path を指定
        with:
          package-path: '.' # ルートの package.json を使う

      # ビルド成果物をダウンロード
      - name: 成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          path: artifacts # ダウンロード先ディレクトリ

      # アーカイブを展開
      - name: Extract Archives
        shell: bash
        run: |
          echo "Extracting downloaded artifacts..."
          # find で全てのアーカイブを見つけて展開
          # zip ファイルを展開
          find artifacts -name '*.zip' -execdir unzip -o {} \;
          # tar.gz ファイルを展開
          find artifacts -name '*.tar.gz' -exec tar xzf {} -C $(dirname {}) \;
          echo "Extraction complete."
          echo "Files in artifacts directory after extraction:"
          find artifacts -type f

      # 成果物をプロジェクトルートにコピー
      # NAPI-RS は通常、ルートディレクトリにある .node ファイルを探します
      - name: 成果物を配置
        shell: bash
        run: |
          echo "Copying built artifacts to root..."
          # アーティファクトは artifacts/binaries-<platform>/electron-pan-clip.<platform>.node に展開されているはず
          # これらをプロジェクトのルートディレクトリにコピーする
          # find コマンドで全ての .node ファイルを見つけてカレントディレクトリにコピー
          find artifacts -name '*.node' -exec cp {} . \;

          echo "Copied .node files to root directory:"
          ls -la *.node

      # npm へパブリッシュ (provenance を使用)
      # package.json の prepublishOnly スクリプトが @napi-rs/cli build --release などを実行することを期待
      - name: npm へパブリッシュ
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # バイナリ検証は publish 後に行うか、別ジョブにするか、内容を見直す必要がある
      # - name: バイナリ検証
      #   run: node scripts/verify-binaries.js

  # GitHub Release へアセットをアップロード
  upload-assets:
    name: GitHubリリースへアセットをアップロード
    needs: [check-version, create-release, build-binaries, prepare-release]
    # リリース準備が完了した場合のみ実行
    if: needs.check-version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: 成果物をダウンロード
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: アセットをアップロード
        uses: softprops/action-gh-release@v1 # Use the same action for uploading
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }} # Use version directly from prepare-release
          files: |
            artifacts/binaries-*/*.tar.gz
            artifacts/binaries-*/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # スモークテスト
  smoke-test:
    name: スモークテスト (${{ matrix.os }})
    needs: [check-version, publish-npm]
    if: needs.check-version.outputs.should_release == 'true' || github.event_name == 'release'
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      
      - name: パッケージバージョン取得
        id: get-version
        shell: bash
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"
          else
            VERSION="${{ needs.check-version.outputs.version }}"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
      
      # スモークテスト実行
      - name: スモークテスト実行
        uses: ./.github/actions/smoke-test
        with:
          package-name: 'electron-pan-clip'
          version: ${{ steps.get-version.outputs.version }}
          wait-time: '60'
