name: 'スモークテスト'
description: 'パブリッシュされたnpmパッケージをインストールしてテストする'

inputs:
  package-name:
    description: 'パッケージ名'
    required: true
  version:
    description: 'パッケージバージョン'
    required: true
  node-version:
    description: 'Node.jsのバージョン (空の場合は.node-versionを使用)'
    required: false
    default: ''
  registry-url:
    description: 'npmレジストリのURL'
    required: false
    default: 'https://registry.npmjs.org'
  wait-time:
    description: 'パッケージが公開されるまでの待機時間（秒）'
    required: false
    default: '30'
  test-script:
    description: 'テストスクリプト'
    required: false
    default: ''

runs:
  using: "composite"
  steps:
    - name: Node.js設定
      uses: ./.github/actions/node-setup
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: ${{ inputs.registry-url }}
        package-path: '.'
    
    - name: Wait for npm registry
      shell: bash
      run: |
        echo "パッケージが公開されるまで${{ inputs.wait-time }}秒待機..."
        sleep ${{ inputs.wait-time }}
    
    - name: テスト用ファイル作成
      shell: bash
      run: echo "console.log('test');" > test.js
    
    - name: パッケージをインストール
      shell: bash
      run: |
        echo "パッケージ ${{ inputs.package-name }}@${{ inputs.version }} をインストール"
        npm install -g ${{ inputs.package-name }}@${{ inputs.version }}
    
    - name: インポートテスト
      shell: bash
      run: |
        echo "実行環境情報:"
        echo "OS: $(uname -s), アーキテクチャ: $(uname -m)"
        echo "Node.js バージョン: $(node -v)"
        
        # パッケージの詳細を確認
        echo "パッケージ内容の確認:"
        npm list -g ${{ inputs.package-name }} --depth=0
        
        # インストールされたバイナリの確認
        NODE_MODULES_PATH=$(npm root -g)
        echo "インストールされたバイナリファイル:"
        find $NODE_MODULES_PATH/${{ inputs.package-name }} -name "*.node" | sort
        
        # テスト実行
        echo "パッケージ動作テスト:"
        NODE_PATH=$(npm root -g) node -e "try { console.log('Imported package:', require('${{ inputs.package-name }}')); } catch (e) { console.error('インポートエラー:', e); process.exit(1); }"
    
    - name: カスタムテスト実行
      if: inputs.test-script != ''
      shell: bash
      run: ${{ inputs.test-script }} 