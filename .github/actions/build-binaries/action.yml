name: 'マルチアーキテクチャバイナリビルド'
description: '各プラットフォーム向けのバイナリをビルドする'

inputs:
  target:
    description: 'ビルドターゲット (例: x86_64-unknown-linux-gnu)'
    required: true
  os:
    description: 'ビルド実行OS'
    required: true
  name:
    description: 'ビルド名 (例: linux-x64)'
    required: true
  setup-script:
    description: 'クロスコンパイル用の追加セットアップスクリプト'
    required: false
    default: ''
  upload-artifact:
    description: 'ビルド成果物をアップロードするかどうか'
    required: false
    default: 'true'
  artifact-name-prefix:
    description: 'アーティファクト名のプレフィックス'
    required: false
    default: 'binaries'

runs:
  using: "composite"
  steps:
    - name: Node.js設定
      uses: ./.github/actions/node-setup
      with:
        node-version: ''
        package-path: '.'
        
    - name: Rust設定
      uses: ./.github/actions/setup-rust
      with:
        toolchain: stable
    
    # クロスコンパイル用の追加セットアップ
    - name: クロスコンパイルセットアップ
      if: inputs.setup-script != ''
      shell: bash
      run: ${{ inputs.setup-script }}
    
    # napi CLIのインストール
    - name: napi CLIインストール
      shell: bash
      run: npm install -g @napi-rs/cli
    
    # 特定のターゲット向けにビルド
    - name: バイナリビルド
      shell: bash
      run: |
        set -ex
        napi build --platform --release --target ${{ inputs.target }}
        echo "ビルド後のファイル検索："
        
        # npmディレクトリとその中身を表示
        echo "npmディレクトリの内容:"
        ls -la npm
        
        # .nodeファイル検索（ターゲット文字列によるフィルタリングなし）
        echo "全ての.nodeファイル:"
        find . -name "*.node" || echo ".nodeファイルが見つかりません"
        
        # npmディレクトリ内の各ディレクトリの内容を表示
        for dir in npm/*; do
          echo "内容 $dir:"
          ls -la $dir || echo "$dirは空またはアクセスできません"
        done

    - name: 成果物をターゲットディレクトリに移動
      shell: bash
      run: |
        set -e
        # 出力先を release ディレクトリにする
        TARGET_DIR="target/${{ inputs.target }}/release"
        mkdir -p "$TARGET_DIR"
        
        # 生成された.nodeファイルを探す (ルートから検索)
        NODE_FILE=$(find . -maxdepth 1 -name "electron-pan-clip.*.node" -print -quit)
        
        if [[ -n "$NODE_FILE" ]]; then
          echo "Moving $NODE_FILE to $TARGET_DIR"
          mv "$NODE_FILE" "$TARGET_DIR/"
        else
          echo "Error: No .node file found in project root after build!"
          # ビルド後のファイル検索（再実行）
          find . -name "*.node"
          exit 1
        fi

    # ビルド成果物をアップロード
    - name: 成果物をアップロード
      if: inputs.upload-artifact == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.artifact-name-prefix }}-${{ inputs.name }}
        path: |
          *.node
          electron-pan-clip.*.node
          npm/*/electron-pan-clip.*.node
        if-no-files-found: error 