/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/**
 * クリップボードから読み取ったデータを保持する構造体
 * `read_clipboard_file_paths` から成功した値を抽出して生成することを想定
 */
export interface ClipboardContent {
  /** ファイルパスのリスト。読み取りに失敗した場合は空の配列。 */
  filePaths: Array<string>
  /** テキスト内容。読み取りに失敗した場合はnull。 */
  text?: string
}
/** クリップボードのバイナリデータを読みやすい形式で表示するための構造体 */
export interface ReadableClipboardContent {
  /** バイナリデータをHEX形式で表示 */
  hexView?: string
  /** バイナリデータをUTF-8テキストとして解釈（可能な場合） */
  textView?: string
  /** バイナリデータのMIMEタイプ（判別可能な場合） */
  mimeType?: string
  /** データのサイズ（バイト単位） */
  size: number
  /** 最初の数バイトのプレビュー */
  preview?: string
}
/** Hello World関数 - 動作確認用 */
export declare function helloWorld(): string
/**
 * Copies the given list of file paths to the OS clipboard.
 *
 * # Arguments
 * * `paths` - A list of absolute or relative file paths to copy.
 *   - The paths will be registered to the clipboard in the appropriate format for each OS.
 *   - Passing an empty list will result in an error.
 *
 * # Returns
 * * Returns `Ok(())` if the operation succeeds.
 * * Returns `Err(napi::Error)` if an error occurs.
 *
 * # Note
 * * This function will actually change the contents of the system clipboard.
 * * Please be careful when running tests.
 */
export declare function writeClipboardFilePaths(paths: Array<string>): void
/**
 * Reads content from the OS clipboard, trying to extract both file paths and text independently.
 *
 * # Returns
 * * Returns `Ok(ClipboardContent)` containing results for both file paths and text reads.
 * * Returns `Err(napi::Error)` if both file paths and text reads failed.
 *
 * # Note
 * * This function attempts to read both file paths and text, returning their respective outcomes.
 * * If at least one of the reads succeeds, the function returns success with available data.
 * * Only returns an error if both file paths and text reads fail.
 */
export declare function readClipboardFilePaths(): ClipboardContent
